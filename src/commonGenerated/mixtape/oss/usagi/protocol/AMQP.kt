// DO NOT EDIT THIS FILE! This was generated by the `./gradlew :generateAmqpClasses` task.`
package mixtape.oss.usagi.protocol

import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.Short
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map
import kotlinx.datetime.Instant
import mixtape.oss.usagi.channel.command.ContentHeader
import mixtape.oss.usagi.protocol.reader.MethodProtocolReader
import mixtape.oss.usagi.protocol.reader.ProtocolPropertiesReader
import mixtape.oss.usagi.protocol.type.LongString
import mixtape.oss.usagi.protocol.writer.MethodProtocolWriter
import mixtape.oss.usagi.protocol.writer.ProtocolPropertiesWriter

public object AMQP {
    public suspend fun readMethodFrom(reader: MethodProtocolReader): Method {
        val classId = reader.readShortUnsigned().toInt()
        val methodId = reader.readShortUnsigned().toInt()
        return when (classId) {
            10 -> when (methodId) {
                10 -> Connection.Start(reader)
                11 -> Connection.StartOk(reader)
                20 -> Connection.Secure(reader)
                21 -> Connection.SecureOk(reader)
                30 -> Connection.Tune(reader)
                31 -> Connection.TuneOk(reader)
                40 -> Connection.Open(reader)
                41 -> Connection.OpenOk(reader)
                50 -> Connection.Close(reader)
                51 -> Connection.CloseOk
                60 -> Connection.Blocked(reader)
                61 -> Connection.Unblocked
                70 -> Connection.UpdateSecret(reader)
                71 -> Connection.UpdateSecretOk
                else -> error("Invalid method id $methodId for class $classId")
            }

            20 -> when (methodId) {
                10 -> Channel.Open(reader)
                11 -> Channel.OpenOk(reader)
                20 -> Channel.Flow(reader)
                21 -> Channel.FlowOk(reader)
                40 -> Channel.Close(reader)
                41 -> Channel.CloseOk
                else -> error("Invalid method id $methodId for class $classId")
            }

            30 -> when (methodId) {
                10 -> Access.Request(reader)
                11 -> Access.RequestOk(reader)
                else -> error("Invalid method id $methodId for class $classId")
            }

            40 -> when (methodId) {
                10 -> Exchange.Declare(reader)
                11 -> Exchange.DeclareOk
                20 -> Exchange.Delete(reader)
                21 -> Exchange.DeleteOk
                30 -> Exchange.Bind(reader)
                31 -> Exchange.BindOk
                40 -> Exchange.Unbind(reader)
                51 -> Exchange.UnbindOk
                else -> error("Invalid method id $methodId for class $classId")
            }

            50 -> when (methodId) {
                10 -> Queue.Declare(reader)
                11 -> Queue.DeclareOk(reader)
                20 -> Queue.Bind(reader)
                21 -> Queue.BindOk
                30 -> Queue.Purge(reader)
                31 -> Queue.PurgeOk(reader)
                40 -> Queue.Delete(reader)
                41 -> Queue.DeleteOk(reader)
                50 -> Queue.Unbind(reader)
                51 -> Queue.UnbindOk
                else -> error("Invalid method id $methodId for class $classId")
            }

            60 -> when (methodId) {
                10 -> Basic.Qos(reader)
                11 -> Basic.QosOk
                20 -> Basic.Consume(reader)
                21 -> Basic.ConsumeOk(reader)
                30 -> Basic.Cancel(reader)
                31 -> Basic.CancelOk(reader)
                40 -> Basic.Publish(reader)
                50 -> Basic.Return(reader)
                60 -> Basic.Deliver(reader)
                70 -> Basic.Get(reader)
                71 -> Basic.GetOk(reader)
                72 -> Basic.GetEmpty(reader)
                80 -> Basic.Ack(reader)
                90 -> Basic.Reject(reader)
                100 -> Basic.RecoverAsync(reader)
                110 -> Basic.Recover(reader)
                111 -> Basic.RecoverOk
                120 -> Basic.Nack(reader)
                else -> error("Invalid method id $methodId for class $classId")
            }

            90 -> when (methodId) {
                10 -> Tx.Select
                11 -> Tx.SelectOk
                20 -> Tx.Commit
                21 -> Tx.CommitOk
                30 -> Tx.Rollback
                31 -> Tx.RollbackOk
                else -> error("Invalid method id $methodId for class $classId")
            }

            85 -> when (methodId) {
                10 -> Confirm.Select(reader)
                11 -> Confirm.SelectOk
                else -> error("Invalid method id $methodId for class $classId")
            }

            else -> error("Invalid class id: $classId")
        }
    }

    public suspend fun readPropertiesFrom(classId: Short, reader: ProtocolPropertiesReader):
        ContentHeader.Properties = when (classId.toInt()) {
        60 -> Basic.Properties(reader)
        else -> error("Invalid class id: $classId")
    }

    public object Connection {
        public data class Start(
            public val versionMajor: Int,
            public val versionMinor: Int,
            public val serverProperties: Map<String, Any?>,
            public val mechanisms: LongString,
            public val locales: LongString,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .versionMajor(versionMajor)
                .versionMinor(versionMinor)
                .serverProperties(serverProperties)
                .mechanisms(mechanisms)
                .locales(locales)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "connection.start"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeOctet(versionMajor)
                writer.writeOctet(versionMinor)
                writer.writeFieldTable(serverProperties)
                writer.writeLongString(mechanisms)
                writer.writeLongString(locales)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Start = Start(
                    reader.readOctet(),
                    reader.readOctet(),
                    reader.readFieldTable(),
                    reader.readLongString(),
                    reader.readLongString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Start = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var versionMajor: Int = 0

                public var versionMinor: Int = 9

                public lateinit var serverProperties: Map<String, Any?>

                public var mechanisms: LongString = LongString("PLAIN")

                public var locales: LongString = LongString("en_US")

                public fun versionMajor(`value`: Int): Builder {
                    versionMajor = value
                    return this
                }

                public fun versionMinor(`value`: Int): Builder {
                    versionMinor = value
                    return this
                }

                public fun serverProperties(`value`: Map<String, Any?>): Builder {
                    serverProperties = value
                    return this
                }

                public fun mechanisms(`value`: LongString): Builder {
                    mechanisms = value
                    return this
                }

                public fun locales(`value`: LongString): Builder {
                    locales = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    versionMajor = other.versionMajor
                    versionMinor = other.versionMinor
                    serverProperties = other.serverProperties
                    mechanisms = other.mechanisms
                    locales = other.locales
                    return this
                }

                public fun build(): Start = Start(
                    versionMajor, versionMinor, serverProperties, mechanisms,
                    locales,
                )
            }
        }

        public data class StartOk(
            public val clientProperties: Map<String, Any?>,
            public val mechanism: String,
            public val response: LongString,
            public val locale: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .clientProperties(clientProperties)
                .mechanism(mechanism)
                .response(response)
                .locale(locale)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "connection.start-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeFieldTable(clientProperties)
                writer.writeShortString(mechanism)
                writer.writeLongString(response)
                writer.writeShortString(locale)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): StartOk = StartOk(
                    reader.readFieldTable(),
                    reader.readShortString(),
                    reader.readLongString(),
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): StartOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public lateinit var clientProperties: Map<String, Any?>

                public var mechanism: String = "PLAIN"

                public var response: LongString by kotlin.properties.Delegates.notNull()

                public var locale: String = "en_US"

                public fun clientProperties(`value`: Map<String, Any?>): Builder {
                    clientProperties = value
                    return this
                }

                public fun mechanism(`value`: String): Builder {
                    mechanism = value
                    return this
                }

                public fun response(`value`: LongString): Builder {
                    response = value
                    return this
                }

                public fun locale(`value`: String): Builder {
                    locale = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    clientProperties = other.clientProperties
                    mechanism = other.mechanism
                    response = other.response
                    locale = other.locale
                    return this
                }

                public fun build(): StartOk = StartOk(clientProperties, mechanism, response, locale)
            }
        }

        public data class Secure(
            public val challenge: LongString,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .challenge(challenge)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 20

            public override fun methodName(): String = "connection.secure"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongString(challenge)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Secure = Secure(
                    reader.readLongString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Secure = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var challenge: LongString by kotlin.properties.Delegates.notNull()

                public fun challenge(`value`: LongString): Builder {
                    challenge = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    challenge = other.challenge
                    return this
                }

                public fun build(): Secure = Secure(challenge)
            }
        }

        public data class SecureOk(
            public val response: LongString,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .response(response)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 21

            public override fun methodName(): String = "connection.secure-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongString(response)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): SecureOk = SecureOk(
                    reader.readLongString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): SecureOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var response: LongString by kotlin.properties.Delegates.notNull()

                public fun response(`value`: LongString): Builder {
                    response = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    response = other.response
                    return this
                }

                public fun build(): SecureOk = SecureOk(response)
            }
        }

        public data class Tune(
            public val channelMax: Short,
            public val frameMax: Int,
            public val heartbeat: Short,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .channelMax(channelMax)
                .frameMax(frameMax)
                .heartbeat(heartbeat)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 30

            public override fun methodName(): String = "connection.tune"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(channelMax)
                writer.writeLongUnsigned(frameMax)
                writer.writeShortUnsigned(heartbeat)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Tune = Tune(
                    reader.readShortUnsigned(),
                    reader.readLongUnsigned(),
                    reader.readShortUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Tune = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var channelMax: Short = 0

                public var frameMax: Int = 0

                public var heartbeat: Short = 0

                public fun channelMax(`value`: Short): Builder {
                    channelMax = value
                    return this
                }

                public fun frameMax(`value`: Int): Builder {
                    frameMax = value
                    return this
                }

                public fun heartbeat(`value`: Short): Builder {
                    heartbeat = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    channelMax = other.channelMax
                    frameMax = other.frameMax
                    heartbeat = other.heartbeat
                    return this
                }

                public fun build(): Tune = Tune(channelMax, frameMax, heartbeat)
            }
        }

        public data class TuneOk(
            public val channelMax: Short,
            public val frameMax: Int,
            public val heartbeat: Short,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .channelMax(channelMax)
                .frameMax(frameMax)
                .heartbeat(heartbeat)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 31

            public override fun methodName(): String = "connection.tune-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(channelMax)
                writer.writeLongUnsigned(frameMax)
                writer.writeShortUnsigned(heartbeat)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): TuneOk = TuneOk(
                    reader.readShortUnsigned(),
                    reader.readLongUnsigned(),
                    reader.readShortUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): TuneOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var channelMax: Short = 0

                public var frameMax: Int = 0

                public var heartbeat: Short = 0

                public fun channelMax(`value`: Short): Builder {
                    channelMax = value
                    return this
                }

                public fun frameMax(`value`: Int): Builder {
                    frameMax = value
                    return this
                }

                public fun heartbeat(`value`: Short): Builder {
                    heartbeat = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    channelMax = other.channelMax
                    frameMax = other.frameMax
                    heartbeat = other.heartbeat
                    return this
                }

                public fun build(): TuneOk = TuneOk(channelMax, frameMax, heartbeat)
            }
        }

        public data class Open(
            public val virtualHost: String,
            public val capabilities: String,
            public val insist: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .virtualHost(virtualHost)
                .capabilities(capabilities)
                .insist(insist)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 40

            public override fun methodName(): String = "connection.open"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(virtualHost)
                writer.writeShortString(capabilities)
                writer.writeBit(insist)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Open = Open(
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Open = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var virtualHost: String = "/"

                public var capabilities: String = ""

                public var insist: Boolean = false

                public fun virtualHost(`value`: String): Builder {
                    virtualHost = value
                    return this
                }

                public fun capabilities(`value`: String): Builder {
                    capabilities = value
                    return this
                }

                public fun insist(`value`: Boolean): Builder {
                    insist = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    virtualHost = other.virtualHost
                    capabilities = other.capabilities
                    insist = other.insist
                    return this
                }

                public fun build(): Open = Open(virtualHost, capabilities, insist)
            }
        }

        public data class OpenOk(
            public val knownHosts: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .knownHosts(knownHosts)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 41

            public override fun methodName(): String = "connection.open-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(knownHosts)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): OpenOk = OpenOk(
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): OpenOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var knownHosts: String = ""

                public fun knownHosts(`value`: String): Builder {
                    knownHosts = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    knownHosts = other.knownHosts
                    return this
                }

                public fun build(): OpenOk = OpenOk(knownHosts)
            }
        }

        public data class Close(
            public val replyCode: Short,
            public val replyText: String,
            public val classId: Short,
            public val methodId: Short,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .replyCode(replyCode)
                .replyText(replyText)
                .classId(classId)
                .methodId(methodId)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 50

            public override fun methodName(): String = "connection.close"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(replyCode)
                writer.writeShortString(replyText)
                writer.writeShortUnsigned(classId)
                writer.writeShortUnsigned(methodId)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Close = Close(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortUnsigned(),
                    reader.readShortUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Close = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var replyCode: Short by kotlin.properties.Delegates.notNull()

                public var replyText: String = ""

                public var classId: Short by kotlin.properties.Delegates.notNull()

                public var methodId: Short by kotlin.properties.Delegates.notNull()

                public fun replyCode(`value`: Short): Builder {
                    replyCode = value
                    return this
                }

                public fun replyText(`value`: String): Builder {
                    replyText = value
                    return this
                }

                public fun classId(`value`: Short): Builder {
                    classId = value
                    return this
                }

                public fun methodId(`value`: Short): Builder {
                    methodId = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    replyCode = other.replyCode
                    replyText = other.replyText
                    classId = other.classId
                    methodId = other.methodId
                    return this
                }

                public fun build(): Close = Close(replyCode, replyText, classId, methodId)
            }
        }

        public object CloseOk : Method() {
            public override fun classId(): Short = 10

            public override fun methodId(): Short = 51

            public override fun methodName(): String = "connection.close-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class Blocked(
            public val reason: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .reason(reason)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 60

            public override fun methodName(): String = "connection.blocked"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(reason)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Blocked = Blocked(
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Blocked = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var reason: String = ""

                public fun reason(`value`: String): Builder {
                    reason = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    reason = other.reason
                    return this
                }

                public fun build(): Blocked = Blocked(reason)
            }
        }

        public object Unblocked : Method() {
            public override fun classId(): Short = 10

            public override fun methodId(): Short = 61

            public override fun methodName(): String = "connection.unblocked"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class UpdateSecret(
            public val newSecret: LongString,
            public val reason: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .newSecret(newSecret)
                .reason(reason)

            public override fun classId(): Short = 10

            public override fun methodId(): Short = 70

            public override fun methodName(): String = "connection.update-secret"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongString(newSecret)
                writer.writeShortString(reason)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): UpdateSecret =
                    UpdateSecret(
                        reader.readLongString(),
                        reader.readShortString()
                    )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): UpdateSecret = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var newSecret: LongString by kotlin.properties.Delegates.notNull()

                public lateinit var reason: String

                public fun newSecret(`value`: LongString): Builder {
                    newSecret = value
                    return this
                }

                public fun reason(`value`: String): Builder {
                    reason = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    newSecret = other.newSecret
                    reason = other.reason
                    return this
                }

                public fun build(): UpdateSecret = UpdateSecret(newSecret, reason)
            }
        }

        public object UpdateSecretOk : Method() {
            public override fun classId(): Short = 10

            public override fun methodId(): Short = 71

            public override fun methodName(): String = "connection.update-secret-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }
    }

    public object Channel {
        public data class Open(
            public val outOfBand: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .outOfBand(outOfBand)

            public override fun classId(): Short = 20

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "channel.open"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(outOfBand)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Open = Open(
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Open = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var outOfBand: String = ""

                public fun outOfBand(`value`: String): Builder {
                    outOfBand = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    outOfBand = other.outOfBand
                    return this
                }

                public fun build(): Open = Open(outOfBand)
            }
        }

        public data class OpenOk(
            public val channelId: LongString,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .channelId(channelId)

            public override fun classId(): Short = 20

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "channel.open-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongString(channelId)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): OpenOk = OpenOk(
                    reader.readLongString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): OpenOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var channelId: LongString = LongString("")

                public fun channelId(`value`: LongString): Builder {
                    channelId = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    channelId = other.channelId
                    return this
                }

                public fun build(): OpenOk = OpenOk(channelId)
            }
        }

        public data class Flow(
            public val active: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .active(active)

            public override fun classId(): Short = 20

            public override fun methodId(): Short = 20

            public override fun methodName(): String = "channel.flow"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeBit(active)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Flow = Flow(
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Flow = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var active: Boolean by kotlin.properties.Delegates.notNull()

                public fun active(`value`: Boolean): Builder {
                    active = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    active = other.active
                    return this
                }

                public fun build(): Flow = Flow(active)
            }
        }

        public data class FlowOk(
            public val active: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .active(active)

            public override fun classId(): Short = 20

            public override fun methodId(): Short = 21

            public override fun methodName(): String = "channel.flow-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeBit(active)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): FlowOk = FlowOk(
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): FlowOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var active: Boolean by kotlin.properties.Delegates.notNull()

                public fun active(`value`: Boolean): Builder {
                    active = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    active = other.active
                    return this
                }

                public fun build(): FlowOk = FlowOk(active)
            }
        }

        public data class Close(
            public val replyCode: Short,
            public val replyText: String,
            public val classId: Short,
            public val methodId: Short,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .replyCode(replyCode)
                .replyText(replyText)
                .classId(classId)
                .methodId(methodId)

            public override fun classId(): Short = 20

            public override fun methodId(): Short = 40

            public override fun methodName(): String = "channel.close"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(replyCode)
                writer.writeShortString(replyText)
                writer.writeShortUnsigned(classId)
                writer.writeShortUnsigned(methodId)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Close = Close(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortUnsigned(),
                    reader.readShortUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Close = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var replyCode: Short by kotlin.properties.Delegates.notNull()

                public var replyText: String = ""

                public var classId: Short by kotlin.properties.Delegates.notNull()

                public var methodId: Short by kotlin.properties.Delegates.notNull()

                public fun replyCode(`value`: Short): Builder {
                    replyCode = value
                    return this
                }

                public fun replyText(`value`: String): Builder {
                    replyText = value
                    return this
                }

                public fun classId(`value`: Short): Builder {
                    classId = value
                    return this
                }

                public fun methodId(`value`: Short): Builder {
                    methodId = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    replyCode = other.replyCode
                    replyText = other.replyText
                    classId = other.classId
                    methodId = other.methodId
                    return this
                }

                public fun build(): Close = Close(replyCode, replyText, classId, methodId)
            }
        }

        public object CloseOk : Method() {
            public override fun classId(): Short = 20

            public override fun methodId(): Short = 41

            public override fun methodName(): String = "channel.close-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }
    }

    public object Access {
        public data class Request(
            public val realm: String,
            public val exclusive: Boolean,
            public val passive: Boolean,
            public val active: Boolean,
            public val write: Boolean,
            public val read: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .realm(realm)
                .exclusive(exclusive)
                .passive(passive)
                .active(active)
                .write(write)
                .read(read)

            public override fun classId(): Short = 30

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "access.request"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(realm)
                writer.writeBit(exclusive)
                writer.writeBit(passive)
                writer.writeBit(active)
                writer.writeBit(write)
                writer.writeBit(read)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Request = Request(
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Request = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var realm: String = "/data"

                public var exclusive: Boolean = false

                public var passive: Boolean = true

                public var active: Boolean = true

                public var write: Boolean = true

                public var read: Boolean = true

                public fun realm(`value`: String): Builder {
                    realm = value
                    return this
                }

                public fun exclusive(`value`: Boolean): Builder {
                    exclusive = value
                    return this
                }

                public fun passive(`value`: Boolean): Builder {
                    passive = value
                    return this
                }

                public fun active(`value`: Boolean): Builder {
                    active = value
                    return this
                }

                public fun write(`value`: Boolean): Builder {
                    write = value
                    return this
                }

                public fun read(`value`: Boolean): Builder {
                    read = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    realm = other.realm
                    exclusive = other.exclusive
                    passive = other.passive
                    active = other.active
                    write = other.write
                    read = other.read
                    return this
                }

                public fun build(): Request = Request(realm, exclusive, passive, active, write, read)
            }
        }

        public data class RequestOk(
            public val ticket: Short,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)

            public override fun classId(): Short = 30

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "access.request-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): RequestOk = RequestOk(
                    reader.readShortUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): RequestOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 1

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    return this
                }

                public fun build(): RequestOk = RequestOk(ticket)
            }
        }
    }

    public object Exchange {
        public data class Declare(
            public val ticket: Short,
            public val exchange: String,
            public val type: String,
            public val passive: Boolean,
            public val durable: Boolean,
            public val autoDelete: Boolean,
            public val `internal`: Boolean,
            public val nowait: Boolean,
            public val arguments: Map<String, Any?>,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .exchange(exchange)
                .type(type)
                .passive(passive)
                .durable(durable)
                .autoDelete(autoDelete)
                .internal(internal)
                .nowait(nowait)
                .arguments(arguments)

            public override fun classId(): Short = 40

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "exchange.declare"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(exchange)
                writer.writeShortString(type)
                writer.writeBit(passive)
                writer.writeBit(durable)
                writer.writeBit(autoDelete)
                writer.writeBit(internal)
                writer.writeBit(nowait)
                writer.writeFieldTable(arguments)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Declare = Declare(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readFieldTable()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Declare = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public lateinit var exchange: String

                public var type: String = "direct"

                public var passive: Boolean = false

                public var durable: Boolean = false

                public var autoDelete: Boolean = false

                public var `internal`: Boolean = false

                public var nowait: Boolean = false

                public var arguments: Map<String, Any?> = mapOf()

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun type(`value`: String): Builder {
                    type = value
                    return this
                }

                public fun passive(`value`: Boolean): Builder {
                    passive = value
                    return this
                }

                public fun durable(`value`: Boolean): Builder {
                    durable = value
                    return this
                }

                public fun autoDelete(`value`: Boolean): Builder {
                    autoDelete = value
                    return this
                }

                public fun `internal`(`value`: Boolean): Builder {
                    internal = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun arguments(`value`: Map<String, Any?>): Builder {
                    arguments = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    exchange = other.exchange
                    type = other.type
                    passive = other.passive
                    durable = other.durable
                    autoDelete = other.autoDelete
                    internal = other.internal
                    nowait = other.nowait
                    arguments = other.arguments
                    return this
                }

                public fun build(): Declare = Declare(
                    ticket, exchange, type, passive, durable, autoDelete,
                    internal, nowait, arguments,
                )
            }
        }

        public object DeclareOk : Method() {
            public override fun classId(): Short = 40

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "exchange.declare-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class Delete(
            public val ticket: Short,
            public val exchange: String,
            public val ifUnused: Boolean,
            public val nowait: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .exchange(exchange)
                .ifUnused(ifUnused)
                .nowait(nowait)

            public override fun classId(): Short = 40

            public override fun methodId(): Short = 20

            public override fun methodName(): String = "exchange.delete"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(exchange)
                writer.writeBit(ifUnused)
                writer.writeBit(nowait)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Delete = Delete(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Delete = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public lateinit var exchange: String

                public var ifUnused: Boolean = false

                public var nowait: Boolean = false

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun ifUnused(`value`: Boolean): Builder {
                    ifUnused = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    exchange = other.exchange
                    ifUnused = other.ifUnused
                    nowait = other.nowait
                    return this
                }

                public fun build(): Delete = Delete(ticket, exchange, ifUnused, nowait)
            }
        }

        public object DeleteOk : Method() {
            public override fun classId(): Short = 40

            public override fun methodId(): Short = 21

            public override fun methodName(): String = "exchange.delete-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class Bind(
            public val ticket: Short,
            public val destination: String,
            public val source: String,
            public val routingKey: String,
            public val nowait: Boolean,
            public val arguments: Map<String, Any?>,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .destination(destination)
                .source(source)
                .routingKey(routingKey)
                .nowait(nowait)
                .arguments(arguments)

            public override fun classId(): Short = 40

            public override fun methodId(): Short = 30

            public override fun methodName(): String = "exchange.bind"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(destination)
                writer.writeShortString(source)
                writer.writeShortString(routingKey)
                writer.writeBit(nowait)
                writer.writeFieldTable(arguments)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Bind = Bind(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readFieldTable()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Bind = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public lateinit var destination: String

                public lateinit var source: String

                public var routingKey: String = ""

                public var nowait: Boolean = false

                public var arguments: Map<String, Any?> = mapOf()

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun destination(`value`: String): Builder {
                    destination = value
                    return this
                }

                public fun source(`value`: String): Builder {
                    source = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun arguments(`value`: Map<String, Any?>): Builder {
                    arguments = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    destination = other.destination
                    source = other.source
                    routingKey = other.routingKey
                    nowait = other.nowait
                    arguments = other.arguments
                    return this
                }

                public fun build(): Bind = Bind(
                    ticket, destination, source, routingKey, nowait, arguments,
                )
            }
        }

        public object BindOk : Method() {
            public override fun classId(): Short = 40

            public override fun methodId(): Short = 31

            public override fun methodName(): String = "exchange.bind-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class Unbind(
            public val ticket: Short,
            public val destination: String,
            public val source: String,
            public val routingKey: String,
            public val nowait: Boolean,
            public val arguments: Map<String, Any?>,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .destination(destination)
                .source(source)
                .routingKey(routingKey)
                .nowait(nowait)
                .arguments(arguments)

            public override fun classId(): Short = 40

            public override fun methodId(): Short = 40

            public override fun methodName(): String = "exchange.unbind"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(destination)
                writer.writeShortString(source)
                writer.writeShortString(routingKey)
                writer.writeBit(nowait)
                writer.writeFieldTable(arguments)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Unbind = Unbind(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readFieldTable()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Unbind = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public lateinit var destination: String

                public lateinit var source: String

                public var routingKey: String = ""

                public var nowait: Boolean = false

                public var arguments: Map<String, Any?> = mapOf()

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun destination(`value`: String): Builder {
                    destination = value
                    return this
                }

                public fun source(`value`: String): Builder {
                    source = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun arguments(`value`: Map<String, Any?>): Builder {
                    arguments = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    destination = other.destination
                    source = other.source
                    routingKey = other.routingKey
                    nowait = other.nowait
                    arguments = other.arguments
                    return this
                }

                public fun build(): Unbind = Unbind(
                    ticket, destination, source, routingKey, nowait,
                    arguments,
                )
            }
        }

        public object UnbindOk : Method() {
            public override fun classId(): Short = 40

            public override fun methodId(): Short = 51

            public override fun methodName(): String = "exchange.unbind-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }
    }

    public object Queue {
        public data class Declare(
            public val ticket: Short,
            public val queue: String,
            public val passive: Boolean,
            public val durable: Boolean,
            public val exclusive: Boolean,
            public val autoDelete: Boolean,
            public val nowait: Boolean,
            public val arguments: Map<String, Any?>,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .queue(queue)
                .passive(passive)
                .durable(durable)
                .exclusive(exclusive)
                .autoDelete(autoDelete)
                .nowait(nowait)
                .arguments(arguments)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "queue.declare"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(queue)
                writer.writeBit(passive)
                writer.writeBit(durable)
                writer.writeBit(exclusive)
                writer.writeBit(autoDelete)
                writer.writeBit(nowait)
                writer.writeFieldTable(arguments)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Declare = Declare(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readFieldTable()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Declare = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var queue: String = ""

                public var passive: Boolean = false

                public var durable: Boolean = false

                public var exclusive: Boolean = false

                public var autoDelete: Boolean = false

                public var nowait: Boolean = false

                public var arguments: Map<String, Any?> = mapOf()

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun passive(`value`: Boolean): Builder {
                    passive = value
                    return this
                }

                public fun durable(`value`: Boolean): Builder {
                    durable = value
                    return this
                }

                public fun exclusive(`value`: Boolean): Builder {
                    exclusive = value
                    return this
                }

                public fun autoDelete(`value`: Boolean): Builder {
                    autoDelete = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun arguments(`value`: Map<String, Any?>): Builder {
                    arguments = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    queue = other.queue
                    passive = other.passive
                    durable = other.durable
                    exclusive = other.exclusive
                    autoDelete = other.autoDelete
                    nowait = other.nowait
                    arguments = other.arguments
                    return this
                }

                public fun build(): Declare = Declare(
                    ticket, queue, passive, durable, exclusive,
                    autoDelete, nowait, arguments,
                )
            }
        }

        public data class DeclareOk(
            public val queue: String,
            public val messageCount: Int,
            public val consumerCount: Int,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .queue(queue)
                .messageCount(messageCount)
                .consumerCount(consumerCount)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "queue.declare-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(queue)
                writer.writeLongUnsigned(messageCount)
                writer.writeLongUnsigned(consumerCount)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): DeclareOk = DeclareOk(
                    reader.readShortString(),
                    reader.readLongUnsigned(),
                    reader.readLongUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): DeclareOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public lateinit var queue: String

                public var messageCount: Int by kotlin.properties.Delegates.notNull()

                public var consumerCount: Int by kotlin.properties.Delegates.notNull()

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun messageCount(`value`: Int): Builder {
                    messageCount = value
                    return this
                }

                public fun consumerCount(`value`: Int): Builder {
                    consumerCount = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    queue = other.queue
                    messageCount = other.messageCount
                    consumerCount = other.consumerCount
                    return this
                }

                public fun build(): DeclareOk = DeclareOk(queue, messageCount, consumerCount)
            }
        }

        public data class Bind(
            public val ticket: Short,
            public val queue: String,
            public val exchange: String,
            public val routingKey: String,
            public val nowait: Boolean,
            public val arguments: Map<String, Any?>,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .queue(queue)
                .exchange(exchange)
                .routingKey(routingKey)
                .nowait(nowait)
                .arguments(arguments)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 20

            public override fun methodName(): String = "queue.bind"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(queue)
                writer.writeShortString(exchange)
                writer.writeShortString(routingKey)
                writer.writeBit(nowait)
                writer.writeFieldTable(arguments)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Bind = Bind(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readFieldTable()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Bind = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var queue: String = ""

                public lateinit var exchange: String

                public var routingKey: String = ""

                public var nowait: Boolean = false

                public var arguments: Map<String, Any?> = mapOf()

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun arguments(`value`: Map<String, Any?>): Builder {
                    arguments = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    queue = other.queue
                    exchange = other.exchange
                    routingKey = other.routingKey
                    nowait = other.nowait
                    arguments = other.arguments
                    return this
                }

                public fun build(): Bind = Bind(ticket, queue, exchange, routingKey, nowait, arguments)
            }
        }

        public object BindOk : Method() {
            public override fun classId(): Short = 50

            public override fun methodId(): Short = 21

            public override fun methodName(): String = "queue.bind-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class Purge(
            public val ticket: Short,
            public val queue: String,
            public val nowait: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .queue(queue)
                .nowait(nowait)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 30

            public override fun methodName(): String = "queue.purge"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(queue)
                writer.writeBit(nowait)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Purge = Purge(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Purge = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var queue: String = ""

                public var nowait: Boolean = false

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    queue = other.queue
                    nowait = other.nowait
                    return this
                }

                public fun build(): Purge = Purge(ticket, queue, nowait)
            }
        }

        public data class PurgeOk(
            public val messageCount: Int,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .messageCount(messageCount)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 31

            public override fun methodName(): String = "queue.purge-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongUnsigned(messageCount)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): PurgeOk = PurgeOk(
                    reader.readLongUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): PurgeOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var messageCount: Int by kotlin.properties.Delegates.notNull()

                public fun messageCount(`value`: Int): Builder {
                    messageCount = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    messageCount = other.messageCount
                    return this
                }

                public fun build(): PurgeOk = PurgeOk(messageCount)
            }
        }

        public data class Delete(
            public val ticket: Short,
            public val queue: String,
            public val ifUnused: Boolean,
            public val ifEmpty: Boolean,
            public val nowait: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .queue(queue)
                .ifUnused(ifUnused)
                .ifEmpty(ifEmpty)
                .nowait(nowait)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 40

            public override fun methodName(): String = "queue.delete"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(queue)
                writer.writeBit(ifUnused)
                writer.writeBit(ifEmpty)
                writer.writeBit(nowait)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Delete = Delete(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Delete = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var queue: String = ""

                public var ifUnused: Boolean = false

                public var ifEmpty: Boolean = false

                public var nowait: Boolean = false

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun ifUnused(`value`: Boolean): Builder {
                    ifUnused = value
                    return this
                }

                public fun ifEmpty(`value`: Boolean): Builder {
                    ifEmpty = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    queue = other.queue
                    ifUnused = other.ifUnused
                    ifEmpty = other.ifEmpty
                    nowait = other.nowait
                    return this
                }

                public fun build(): Delete = Delete(ticket, queue, ifUnused, ifEmpty, nowait)
            }
        }

        public data class DeleteOk(
            public val messageCount: Int,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .messageCount(messageCount)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 41

            public override fun methodName(): String = "queue.delete-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongUnsigned(messageCount)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): DeleteOk = DeleteOk(
                    reader.readLongUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): DeleteOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var messageCount: Int by kotlin.properties.Delegates.notNull()

                public fun messageCount(`value`: Int): Builder {
                    messageCount = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    messageCount = other.messageCount
                    return this
                }

                public fun build(): DeleteOk = DeleteOk(messageCount)
            }
        }

        public data class Unbind(
            public val ticket: Short,
            public val queue: String,
            public val exchange: String,
            public val routingKey: String,
            public val arguments: Map<String, Any?>,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .queue(queue)
                .exchange(exchange)
                .routingKey(routingKey)
                .arguments(arguments)

            public override fun classId(): Short = 50

            public override fun methodId(): Short = 50

            public override fun methodName(): String = "queue.unbind"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(queue)
                writer.writeShortString(exchange)
                writer.writeShortString(routingKey)
                writer.writeFieldTable(arguments)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Unbind = Unbind(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readFieldTable()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Unbind = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var queue: String = ""

                public lateinit var exchange: String

                public var routingKey: String = ""

                public var arguments: Map<String, Any?> = mapOf()

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun arguments(`value`: Map<String, Any?>): Builder {
                    arguments = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    queue = other.queue
                    exchange = other.exchange
                    routingKey = other.routingKey
                    arguments = other.arguments
                    return this
                }

                public fun build(): Unbind = Unbind(ticket, queue, exchange, routingKey, arguments)
            }
        }

        public object UnbindOk : Method() {
            public override fun classId(): Short = 50

            public override fun methodId(): Short = 51

            public override fun methodName(): String = "queue.unbind-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }
    }

    public object Basic {
        public data class Qos(
            public val prefetchSize: Int,
            public val prefetchCount: Short,
            public val global: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .prefetchSize(prefetchSize)
                .prefetchCount(prefetchCount)
                .global(global)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "basic.qos"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongUnsigned(prefetchSize)
                writer.writeShortUnsigned(prefetchCount)
                writer.writeBit(global)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Qos = Qos(
                    reader.readLongUnsigned(),
                    reader.readShortUnsigned(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Qos = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var prefetchSize: Int = 0

                public var prefetchCount: Short = 0

                public var global: Boolean = false

                public fun prefetchSize(`value`: Int): Builder {
                    prefetchSize = value
                    return this
                }

                public fun prefetchCount(`value`: Short): Builder {
                    prefetchCount = value
                    return this
                }

                public fun global(`value`: Boolean): Builder {
                    global = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    prefetchSize = other.prefetchSize
                    prefetchCount = other.prefetchCount
                    global = other.global
                    return this
                }

                public fun build(): Qos = Qos(prefetchSize, prefetchCount, global)
            }
        }

        public object QosOk : Method() {
            public override fun classId(): Short = 60

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "basic.qos-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class Consume(
            public val ticket: Short,
            public val queue: String,
            public val consumerTag: String,
            public val noLocal: Boolean,
            public val noAck: Boolean,
            public val exclusive: Boolean,
            public val nowait: Boolean,
            public val arguments: Map<String, Any?>,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .queue(queue)
                .consumerTag(consumerTag)
                .noLocal(noLocal)
                .noAck(noAck)
                .exclusive(exclusive)
                .nowait(nowait)
                .arguments(arguments)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 20

            public override fun methodName(): String = "basic.consume"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(queue)
                writer.writeShortString(consumerTag)
                writer.writeBit(noLocal)
                writer.writeBit(noAck)
                writer.writeBit(exclusive)
                writer.writeBit(nowait)
                writer.writeFieldTable(arguments)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Consume = Consume(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readBit(),
                    reader.readFieldTable()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Consume = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var queue: String = ""

                public var consumerTag: String = ""

                public var noLocal: Boolean = false

                public var noAck: Boolean = false

                public var exclusive: Boolean = false

                public var nowait: Boolean = false

                public var arguments: Map<String, Any?> = mapOf()

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun consumerTag(`value`: String): Builder {
                    consumerTag = value
                    return this
                }

                public fun noLocal(`value`: Boolean): Builder {
                    noLocal = value
                    return this
                }

                public fun noAck(`value`: Boolean): Builder {
                    noAck = value
                    return this
                }

                public fun exclusive(`value`: Boolean): Builder {
                    exclusive = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun arguments(`value`: Map<String, Any?>): Builder {
                    arguments = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    queue = other.queue
                    consumerTag = other.consumerTag
                    noLocal = other.noLocal
                    noAck = other.noAck
                    exclusive = other.exclusive
                    nowait = other.nowait
                    arguments = other.arguments
                    return this
                }

                public fun build(): Consume = Consume(
                    ticket, queue, consumerTag, noLocal, noAck, exclusive,
                    nowait, arguments,
                )
            }
        }

        public data class ConsumeOk(
            public val consumerTag: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .consumerTag(consumerTag)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 21

            public override fun methodName(): String = "basic.consume-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(consumerTag)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): ConsumeOk = ConsumeOk(
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): ConsumeOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public lateinit var consumerTag: String

                public fun consumerTag(`value`: String): Builder {
                    consumerTag = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    consumerTag = other.consumerTag
                    return this
                }

                public fun build(): ConsumeOk = ConsumeOk(consumerTag)
            }
        }

        public data class Cancel(
            public val consumerTag: String,
            public val nowait: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .consumerTag(consumerTag)
                .nowait(nowait)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 30

            public override fun methodName(): String = "basic.cancel"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(consumerTag)
                writer.writeBit(nowait)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Cancel = Cancel(
                    reader.readShortString(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Cancel = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public lateinit var consumerTag: String

                public var nowait: Boolean = false

                public fun consumerTag(`value`: String): Builder {
                    consumerTag = value
                    return this
                }

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    consumerTag = other.consumerTag
                    nowait = other.nowait
                    return this
                }

                public fun build(): Cancel = Cancel(consumerTag, nowait)
            }
        }

        public data class CancelOk(
            public val consumerTag: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .consumerTag(consumerTag)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 31

            public override fun methodName(): String = "basic.cancel-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(consumerTag)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): CancelOk = CancelOk(
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): CancelOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public lateinit var consumerTag: String

                public fun consumerTag(`value`: String): Builder {
                    consumerTag = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    consumerTag = other.consumerTag
                    return this
                }

                public fun build(): CancelOk = CancelOk(consumerTag)
            }
        }

        public data class Publish(
            public val ticket: Short,
            public val exchange: String,
            public val routingKey: String,
            public val mandatory: Boolean,
            public val immediate: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .exchange(exchange)
                .routingKey(routingKey)
                .mandatory(mandatory)
                .immediate(immediate)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 40

            public override fun methodName(): String = "basic.publish"

            public override fun hasContent(): Boolean = true

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(exchange)
                writer.writeShortString(routingKey)
                writer.writeBit(mandatory)
                writer.writeBit(immediate)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Publish = Publish(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readBit(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Publish = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var exchange: String = ""

                public var routingKey: String = ""

                public var mandatory: Boolean = false

                public var immediate: Boolean = false

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun mandatory(`value`: Boolean): Builder {
                    mandatory = value
                    return this
                }

                public fun immediate(`value`: Boolean): Builder {
                    immediate = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    exchange = other.exchange
                    routingKey = other.routingKey
                    mandatory = other.mandatory
                    immediate = other.immediate
                    return this
                }

                public fun build(): Publish = Publish(ticket, exchange, routingKey, mandatory, immediate)
            }
        }

        public data class Return(
            public val replyCode: Short,
            public val replyText: String,
            public val exchange: String,
            public val routingKey: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .replyCode(replyCode)
                .replyText(replyText)
                .exchange(exchange)
                .routingKey(routingKey)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 50

            public override fun methodName(): String = "basic.return"

            public override fun hasContent(): Boolean = true

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(replyCode)
                writer.writeShortString(replyText)
                writer.writeShortString(exchange)
                writer.writeShortString(routingKey)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Return = Return(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Return = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var replyCode: Short by kotlin.properties.Delegates.notNull()

                public var replyText: String = ""

                public lateinit var exchange: String

                public lateinit var routingKey: String

                public fun replyCode(`value`: Short): Builder {
                    replyCode = value
                    return this
                }

                public fun replyText(`value`: String): Builder {
                    replyText = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    replyCode = other.replyCode
                    replyText = other.replyText
                    exchange = other.exchange
                    routingKey = other.routingKey
                    return this
                }

                public fun build(): Return = Return(replyCode, replyText, exchange, routingKey)
            }
        }

        public data class Deliver(
            public val consumerTag: String,
            public val deliveryTag: Long,
            public val redelivered: Boolean,
            public val exchange: String,
            public val routingKey: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .consumerTag(consumerTag)
                .deliveryTag(deliveryTag)
                .redelivered(redelivered)
                .exchange(exchange)
                .routingKey(routingKey)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 60

            public override fun methodName(): String = "basic.deliver"

            public override fun hasContent(): Boolean = true

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(consumerTag)
                writer.writeLongLongUnsigned(deliveryTag)
                writer.writeBit(redelivered)
                writer.writeShortString(exchange)
                writer.writeShortString(routingKey)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Deliver = Deliver(
                    reader.readShortString(),
                    reader.readLongLongUnsigned(),
                    reader.readBit(),
                    reader.readShortString(),
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Deliver = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public lateinit var consumerTag: String

                public var deliveryTag: Long by kotlin.properties.Delegates.notNull()

                public var redelivered: Boolean = false

                public lateinit var exchange: String

                public lateinit var routingKey: String

                public fun consumerTag(`value`: String): Builder {
                    consumerTag = value
                    return this
                }

                public fun deliveryTag(`value`: Long): Builder {
                    deliveryTag = value
                    return this
                }

                public fun redelivered(`value`: Boolean): Builder {
                    redelivered = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    consumerTag = other.consumerTag
                    deliveryTag = other.deliveryTag
                    redelivered = other.redelivered
                    exchange = other.exchange
                    routingKey = other.routingKey
                    return this
                }

                public fun build(): Deliver = Deliver(
                    consumerTag, deliveryTag, redelivered, exchange,
                    routingKey,
                )
            }
        }

        public data class Get(
            public val ticket: Short,
            public val queue: String,
            public val noAck: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .ticket(ticket)
                .queue(queue)
                .noAck(noAck)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 70

            public override fun methodName(): String = "basic.get"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortUnsigned(ticket)
                writer.writeShortString(queue)
                writer.writeBit(noAck)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Get = Get(
                    reader.readShortUnsigned(),
                    reader.readShortString(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Get = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var ticket: Short = 0

                public var queue: String = ""

                public var noAck: Boolean = false

                public fun ticket(`value`: Short): Builder {
                    ticket = value
                    return this
                }

                public fun queue(`value`: String): Builder {
                    queue = value
                    return this
                }

                public fun noAck(`value`: Boolean): Builder {
                    noAck = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    ticket = other.ticket
                    queue = other.queue
                    noAck = other.noAck
                    return this
                }

                public fun build(): Get = Get(ticket, queue, noAck)
            }
        }

        public data class GetOk(
            public val deliveryTag: Long,
            public val redelivered: Boolean,
            public val exchange: String,
            public val routingKey: String,
            public val messageCount: Int,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .deliveryTag(deliveryTag)
                .redelivered(redelivered)
                .exchange(exchange)
                .routingKey(routingKey)
                .messageCount(messageCount)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 71

            public override fun methodName(): String = "basic.get-ok"

            public override fun hasContent(): Boolean = true

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongLongUnsigned(deliveryTag)
                writer.writeBit(redelivered)
                writer.writeShortString(exchange)
                writer.writeShortString(routingKey)
                writer.writeLongUnsigned(messageCount)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): GetOk = GetOk(
                    reader.readLongLongUnsigned(),
                    reader.readBit(),
                    reader.readShortString(),
                    reader.readShortString(),
                    reader.readLongUnsigned()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): GetOk = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var deliveryTag: Long by kotlin.properties.Delegates.notNull()

                public var redelivered: Boolean = false

                public lateinit var exchange: String

                public lateinit var routingKey: String

                public var messageCount: Int by kotlin.properties.Delegates.notNull()

                public fun deliveryTag(`value`: Long): Builder {
                    deliveryTag = value
                    return this
                }

                public fun redelivered(`value`: Boolean): Builder {
                    redelivered = value
                    return this
                }

                public fun exchange(`value`: String): Builder {
                    exchange = value
                    return this
                }

                public fun routingKey(`value`: String): Builder {
                    routingKey = value
                    return this
                }

                public fun messageCount(`value`: Int): Builder {
                    messageCount = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    deliveryTag = other.deliveryTag
                    redelivered = other.redelivered
                    exchange = other.exchange
                    routingKey = other.routingKey
                    messageCount = other.messageCount
                    return this
                }

                public fun build(): GetOk = GetOk(
                    deliveryTag, redelivered, exchange, routingKey,
                    messageCount,
                )
            }
        }

        public data class GetEmpty(
            public val clusterId: String,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .clusterId(clusterId)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 72

            public override fun methodName(): String = "basic.get-empty"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeShortString(clusterId)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): GetEmpty = GetEmpty(
                    reader.readShortString()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): GetEmpty = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var clusterId: String = ""

                public fun clusterId(`value`: String): Builder {
                    clusterId = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    clusterId = other.clusterId
                    return this
                }

                public fun build(): GetEmpty = GetEmpty(clusterId)
            }
        }

        public data class Ack(
            public val deliveryTag: Long,
            public val multiple: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .deliveryTag(deliveryTag)
                .multiple(multiple)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 80

            public override fun methodName(): String = "basic.ack"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongLongUnsigned(deliveryTag)
                writer.writeBit(multiple)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Ack = Ack(
                    reader.readLongLongUnsigned(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Ack = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var deliveryTag: Long = 0

                public var multiple: Boolean = false

                public fun deliveryTag(`value`: Long): Builder {
                    deliveryTag = value
                    return this
                }

                public fun multiple(`value`: Boolean): Builder {
                    multiple = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    deliveryTag = other.deliveryTag
                    multiple = other.multiple
                    return this
                }

                public fun build(): Ack = Ack(deliveryTag, multiple)
            }
        }

        public data class Reject(
            public val deliveryTag: Long,
            public val requeue: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .deliveryTag(deliveryTag)
                .requeue(requeue)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 90

            public override fun methodName(): String = "basic.reject"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongLongUnsigned(deliveryTag)
                writer.writeBit(requeue)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Reject = Reject(
                    reader.readLongLongUnsigned(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Reject = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var deliveryTag: Long by kotlin.properties.Delegates.notNull()

                public var requeue: Boolean = true

                public fun deliveryTag(`value`: Long): Builder {
                    deliveryTag = value
                    return this
                }

                public fun requeue(`value`: Boolean): Builder {
                    requeue = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    deliveryTag = other.deliveryTag
                    requeue = other.requeue
                    return this
                }

                public fun build(): Reject = Reject(deliveryTag, requeue)
            }
        }

        public data class RecoverAsync(
            public val requeue: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .requeue(requeue)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 100

            public override fun methodName(): String = "basic.recover-async"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeBit(requeue)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): RecoverAsync =
                    RecoverAsync(
                        reader.readBit()
                    )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): RecoverAsync = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var requeue: Boolean = false

                public fun requeue(`value`: Boolean): Builder {
                    requeue = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    requeue = other.requeue
                    return this
                }

                public fun build(): RecoverAsync = RecoverAsync(requeue)
            }
        }

        public data class Recover(
            public val requeue: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .requeue(requeue)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 110

            public override fun methodName(): String = "basic.recover"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeBit(requeue)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Recover = Recover(
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Recover = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var requeue: Boolean = false

                public fun requeue(`value`: Boolean): Builder {
                    requeue = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    requeue = other.requeue
                    return this
                }

                public fun build(): Recover = Recover(requeue)
            }
        }

        public object RecoverOk : Method() {
            public override fun classId(): Short = 60

            public override fun methodId(): Short = 111

            public override fun methodName(): String = "basic.recover-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public data class Nack(
            public val deliveryTag: Long,
            public val multiple: Boolean,
            public val requeue: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .deliveryTag(deliveryTag)
                .multiple(multiple)
                .requeue(requeue)

            public override fun classId(): Short = 60

            public override fun methodId(): Short = 120

            public override fun methodName(): String = "basic.nack"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeLongLongUnsigned(deliveryTag)
                writer.writeBit(multiple)
                writer.writeBit(requeue)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Nack = Nack(
                    reader.readLongLongUnsigned(),
                    reader.readBit(),
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Nack = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var deliveryTag: Long = 0

                public var multiple: Boolean = false

                public var requeue: Boolean = true

                public fun deliveryTag(`value`: Long): Builder {
                    deliveryTag = value
                    return this
                }

                public fun multiple(`value`: Boolean): Builder {
                    multiple = value
                    return this
                }

                public fun requeue(`value`: Boolean): Builder {
                    requeue = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    deliveryTag = other.deliveryTag
                    multiple = other.multiple
                    requeue = other.requeue
                    return this
                }

                public fun build(): Nack = Nack(deliveryTag, multiple, requeue)
            }
        }

        public data class Properties(
            public val contentType: String?,
            public val contentEncoding: String?,
            public val headers: Map<String, Any?>?,
            public val deliveryMode: Int?,
            public val priority: Int?,
            public val correlationId: String?,
            public val replyTo: String?,
            public val expiration: String?,
            public val messageId: String?,
            public val timestamp: Instant?,
            public val type: String?,
            public val userId: String?,
            public val appId: String?,
            public val clusterId: String?,
        ) : ContentHeader.Properties {
            public override suspend fun writeTo(writer: ProtocolPropertiesWriter): Unit {
                writer.writePresence(contentType != null)
                writer.writePresence(contentEncoding != null)
                writer.writePresence(headers != null)
                writer.writePresence(deliveryMode != null)
                writer.writePresence(priority != null)
                writer.writePresence(correlationId != null)
                writer.writePresence(replyTo != null)
                writer.writePresence(expiration != null)
                writer.writePresence(messageId != null)
                writer.writePresence(timestamp != null)
                writer.writePresence(type != null)
                writer.writePresence(userId != null)
                writer.writePresence(appId != null)
                writer.writePresence(clusterId != null)
                writer.finishPresence()
                contentType?.let { writer.writeShortString(it) }
                contentEncoding?.let { writer.writeShortString(it) }
                headers?.let { writer.writeFieldTable(it) }
                deliveryMode?.let { writer.writeOctet(it) }
                priority?.let { writer.writeOctet(it) }
                correlationId?.let { writer.writeShortString(it) }
                replyTo?.let { writer.writeShortString(it) }
                expiration?.let { writer.writeShortString(it) }
                messageId?.let { writer.writeShortString(it) }
                timestamp?.let { writer.writeTimestamp(it) }
                type?.let { writer.writeShortString(it) }
                userId?.let { writer.writeShortString(it) }
                appId?.let { writer.writeShortString(it) }
                clusterId?.let { writer.writeShortString(it) }
            }

            public fun toBuilder(): Builder = Builder()
                .contentType(contentType)
                .contentEncoding(contentEncoding)
                .headers(headers)
                .deliveryMode(deliveryMode)
                .priority(priority)
                .correlationId(correlationId)
                .replyTo(replyTo)
                .expiration(expiration)
                .messageId(messageId)
                .timestamp(timestamp)
                .type(type)
                .userId(userId)
                .appId(appId)
                .clusterId(clusterId)

            public override fun classId(): Short = 60

            public companion object {
                public suspend operator fun invoke(reader: ProtocolPropertiesReader): Properties {
                    val contentTypePresent = reader.readPresence()
                    val contentEncodingPresent = reader.readPresence()
                    val headersPresent = reader.readPresence()
                    val deliveryModePresent = reader.readPresence()
                    val priorityPresent = reader.readPresence()
                    val correlationIdPresent = reader.readPresence()
                    val replyToPresent = reader.readPresence()
                    val expirationPresent = reader.readPresence()
                    val messageIdPresent = reader.readPresence()
                    val timestampPresent = reader.readPresence()
                    val typePresent = reader.readPresence()
                    val userIdPresent = reader.readPresence()
                    val appIdPresent = reader.readPresence()
                    val clusterIdPresent = reader.readPresence()
                    reader.finishPresence()
                    return Properties(
                        if (contentTypePresent) reader.readShortString() else null,
                        if (contentEncodingPresent) reader.readShortString() else null,
                        if (headersPresent) reader.readFieldTable() else null,
                        if (deliveryModePresent) reader.readOctet() else null,
                        if (priorityPresent) reader.readOctet() else null,
                        if (correlationIdPresent) reader.readShortString() else null,
                        if (replyToPresent) reader.readShortString() else null,
                        if (expirationPresent) reader.readShortString() else null,
                        if (messageIdPresent) reader.readShortString() else null,
                        if (timestampPresent) reader.readTimestamp() else null,
                        if (typePresent) reader.readShortString() else null,
                        if (userIdPresent) reader.readShortString() else null,
                        if (appIdPresent) reader.readShortString() else null,
                        if (clusterIdPresent) reader.readShortString() else null
                    )
                }

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Properties = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var contentType: String? = null

                public var contentEncoding: String? = null

                public var headers: Map<String, Any?>? = null

                public var deliveryMode: Int? = null

                public var priority: Int? = null

                public var correlationId: String? = null

                public var replyTo: String? = null

                public var expiration: String? = null

                public var messageId: String? = null

                public var timestamp: Instant? = null

                public var type: String? = null

                public var userId: String? = null

                public var appId: String? = null

                public var clusterId: String? = null

                public fun contentType(`value`: String?): Builder {
                    contentType = value
                    return this
                }

                public fun contentEncoding(`value`: String?): Builder {
                    contentEncoding = value
                    return this
                }

                public fun headers(`value`: Map<String, Any?>?): Builder {
                    headers = value
                    return this
                }

                public fun deliveryMode(`value`: Int?): Builder {
                    deliveryMode = value
                    return this
                }

                public fun priority(`value`: Int?): Builder {
                    priority = value
                    return this
                }

                public fun correlationId(`value`: String?): Builder {
                    correlationId = value
                    return this
                }

                public fun replyTo(`value`: String?): Builder {
                    replyTo = value
                    return this
                }

                public fun expiration(`value`: String?): Builder {
                    expiration = value
                    return this
                }

                public fun messageId(`value`: String?): Builder {
                    messageId = value
                    return this
                }

                public fun timestamp(`value`: Instant?): Builder {
                    timestamp = value
                    return this
                }

                public fun type(`value`: String?): Builder {
                    type = value
                    return this
                }

                public fun userId(`value`: String?): Builder {
                    userId = value
                    return this
                }

                public fun appId(`value`: String?): Builder {
                    appId = value
                    return this
                }

                public fun clusterId(`value`: String?): Builder {
                    clusterId = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    contentType = other.contentType
                    contentEncoding = other.contentEncoding
                    headers = other.headers
                    deliveryMode = other.deliveryMode
                    priority = other.priority
                    correlationId = other.correlationId
                    replyTo = other.replyTo
                    expiration = other.expiration
                    messageId = other.messageId
                    timestamp = other.timestamp
                    type = other.type
                    userId = other.userId
                    appId = other.appId
                    clusterId = other.clusterId
                    return this
                }

                public fun build(): Properties = Properties(
                    contentType, contentEncoding, headers,
                    deliveryMode, priority, correlationId, replyTo, expiration, messageId, timestamp, type,
                    userId, appId, clusterId,
                )
            }
        }
    }

    public object Tx {
        public object Select : Method() {
            public override fun classId(): Short = 90

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "tx.select"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public object SelectOk : Method() {
            public override fun classId(): Short = 90

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "tx.select-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public object Commit : Method() {
            public override fun classId(): Short = 90

            public override fun methodId(): Short = 20

            public override fun methodName(): String = "tx.commit"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public object CommitOk : Method() {
            public override fun classId(): Short = 90

            public override fun methodId(): Short = 21

            public override fun methodName(): String = "tx.commit-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public object Rollback : Method() {
            public override fun classId(): Short = 90

            public override fun methodId(): Short = 30

            public override fun methodName(): String = "tx.rollback"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }

        public object RollbackOk : Method() {
            public override fun classId(): Short = 90

            public override fun methodId(): Short = 31

            public override fun methodName(): String = "tx.rollback-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }
    }

    public object Confirm {
        public data class Select(
            public val nowait: Boolean,
        ) : Method() {
            public fun toBuilder(): Builder = Builder()
                .nowait(nowait)

            public override fun classId(): Short = 85

            public override fun methodId(): Short = 10

            public override fun methodName(): String = "confirm.select"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
                writer.writeBit(nowait)
            }

            public companion object {
                public suspend operator fun invoke(reader: MethodProtocolReader): Select = Select(
                    reader.readBit()
                )

                public inline operator fun invoke(block: Builder.() -> Unit = {}): Select = Builder()
                    .apply(block)
                    .build()
            }

            public class Builder {
                public var nowait: Boolean = false

                public fun nowait(`value`: Boolean): Builder {
                    nowait = value
                    return this
                }

                public fun copyFrom(other: Builder): Builder {
                    nowait = other.nowait
                    return this
                }

                public fun build(): Select = Select(nowait)
            }
        }

        public object SelectOk : Method() {
            public override fun classId(): Short = 85

            public override fun methodId(): Short = 11

            public override fun methodName(): String = "confirm.select-ok"

            public override fun hasContent(): Boolean = false

            public override suspend fun writeTo(writer: MethodProtocolWriter): Unit {
            }
        }
    }
}
